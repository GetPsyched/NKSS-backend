// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: member.sql

package query

import (
	"context"

	"github.com/lib/pq"
)

const createClubMember = `-- name: CreateClubMember :exec
INSERT INTO club_member (
    club_name, roll_number, position, extra_groups
)
VALUES (
    (SELECT c.name FROM club AS c WHERE c.name = $1 OR c.alias = $1),
    $2,
    $3,
    $4
)
`

type CreateClubMemberParams struct {
	ClubNameOrAlias string   `json:"club_name_or_alias"`
	RollNumber      string   `json:"roll_number"`
	Position        string   `json:"position"`
	ExtraGroups     []string `json:"extra_groups"`
}

func (q *Queries) CreateClubMember(ctx context.Context, arg CreateClubMemberParams) error {
	_, err := q.db.ExecContext(ctx, createClubMember,
		arg.ClubNameOrAlias,
		arg.RollNumber,
		arg.Position,
		pq.Array(arg.ExtraGroups),
	)
	return err
}

const deleteClubMember = `-- name: DeleteClubMember :exec
DELETE FROM
    club_member
WHERE
    club_member.club_name = (SELECT c.name FROM club AS c WHERE c.name = $1 OR c.alias = $1)
    AND club_member.roll_number = $2
`

type DeleteClubMemberParams struct {
	ClubNameOrAlias string `json:"club_name_or_alias"`
	RollNumber      string `json:"roll_number"`
}

func (q *Queries) DeleteClubMember(ctx context.Context, arg DeleteClubMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteClubMember, arg.ClubNameOrAlias, arg.RollNumber)
	return err
}

const readClubMembers = `-- name: ReadClubMembers :many
SELECT
    student.roll_number,
    student.name,
    student.section,
    student.batch,
    student.email,
    club_member.position,
    club_member.extra_groups
FROM
    student
    JOIN club_member ON student.roll_number = club_member.roll_number
WHERE
    club_member.club_name = (SELECT c.name FROM club AS c WHERE c.name = $1 OR c.alias = $1)
`

type ReadClubMembersRow struct {
	RollNumber  string   `json:"roll_number"`
	Name        string   `json:"name"`
	Section     string   `json:"section"`
	Batch       int16    `json:"batch"`
	Email       string   `json:"email"`
	Position    string   `json:"position"`
	ExtraGroups []string `json:"extra_groups"`
}

func (q *Queries) ReadClubMembers(ctx context.Context, clubNameOrAlias string) ([]ReadClubMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, readClubMembers, clubNameOrAlias)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClubMembersRow
	for rows.Next() {
		var i ReadClubMembersRow
		if err := rows.Scan(
			&i.RollNumber,
			&i.Name,
			&i.Section,
			&i.Batch,
			&i.Email,
			&i.Position,
			pq.Array(&i.ExtraGroups),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClubMember = `-- name: UpdateClubMember :exec
UPDATE
    club_member
SET
    position = $1,
    extra_groups = $2
WHERE
    roll_number = $3
    AND club_name = (SELECT c.name FROM club AS c WHERE c.name = $4 OR c.alias = $4)
`

type UpdateClubMemberParams struct {
	Position        string   `json:"position"`
	ExtraGroups     []string `json:"extra_groups"`
	RollNumber      string   `json:"roll_number"`
	ClubNameOrAlias string   `json:"club_name_or_alias"`
}

func (q *Queries) UpdateClubMember(ctx context.Context, arg UpdateClubMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateClubMember,
		arg.Position,
		pq.Array(arg.ExtraGroups),
		arg.RollNumber,
		arg.ClubNameOrAlias,
	)
	return err
}

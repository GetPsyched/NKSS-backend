// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: club.sql

package query

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const createClubFaculty = `-- name: CreateClubFaculty :exec
INSERT INTO club_faculty (
    club_name, emp_id
)
VALUES (
    (SELECT c.name FROM club AS c WHERE c.name = $1 OR c.alias = $1),
    $2
)
`

type CreateClubFacultyParams struct {
	Name  string `json:"name"`
	EmpID int32  `json:"emp_id"`
}

func (q *Queries) CreateClubFaculty(ctx context.Context, arg CreateClubFacultyParams) error {
	_, err := q.db.ExecContext(ctx, createClubFaculty, arg.Name, arg.EmpID)
	return err
}

const createClubSocial = `-- name: CreateClubSocial :exec
INSERT INTO club_social (
    club_name, platform_type, link
)
VALUES (
    (SELECT c.name FROM club AS c WHERE c.name = $1 OR c.alias = $1),
    $2,
    $3
)
`

type CreateClubSocialParams struct {
	Name         string `json:"name"`
	PlatformType string `json:"platform_type"`
	Link         string `json:"link"`
}

func (q *Queries) CreateClubSocial(ctx context.Context, arg CreateClubSocialParams) error {
	_, err := q.db.ExecContext(ctx, createClubSocial, arg.Name, arg.PlatformType, arg.Link)
	return err
}

const deleteClubFaculty = `-- name: DeleteClubFaculty :exec
DELETE FROM
    club_faculty AS cf
WHERE
    cf.club_name = (SELECT c.name FROM club c WHERE c.name = $1 OR c.alias = $1)
    AND cf.emp_id = $2
`

type DeleteClubFacultyParams struct {
	Name  string `json:"name"`
	EmpID int32  `json:"emp_id"`
}

func (q *Queries) DeleteClubFaculty(ctx context.Context, arg DeleteClubFacultyParams) error {
	_, err := q.db.ExecContext(ctx, deleteClubFaculty, arg.Name, arg.EmpID)
	return err
}

const deleteClubSocial = `-- name: DeleteClubSocial :exec
DELETE FROM club_social
WHERE
    club_name = (SELECT name FROM club WHERE name = $1 OR alias = $1)
    AND platform_type = $2
`

type DeleteClubSocialParams struct {
	Name         string `json:"name"`
	PlatformType string `json:"platform_type"`
}

func (q *Queries) DeleteClubSocial(ctx context.Context, arg DeleteClubSocialParams) error {
	_, err := q.db.ExecContext(ctx, deleteClubSocial, arg.Name, arg.PlatformType)
	return err
}

const getClub = `-- name: GetClub :one
SELECT
    club.name,
    COALESCE(club.alias, '') AS alias,
    club.category,
    club.short_description,
    club.email,
    club.is_official,
    COALESCE(JSONB_BUILD_OBJECT(
        'about_us', cd.about_us,
        'why_us', cd.why_us,
        'role_of_sophomore', cd.role_of_soph,
        'role_of_junior', cd.role_of_junior,
        'role_of_senior', cd.role_of_senior
    ), '{}')::JSONB AS description,
    (
        SELECT
            COALESCE(JSONB_AGG(JSONB_BUILD_OBJECT(
                'position', club_member.position,
                'roll', s.roll_number,
                'name', s.name,
                'phone', s.mobile,
                'email', s.email
            ) ORDER BY s.name), '[]')::JSONB
        FROM
            student AS s
            JOIN club_member ON s.roll_number = club_member.roll_number AND club.name = club_member.club_name
        WHERE
            s.roll_number = ANY(SELECT roll_number FROM club_member WHERE club_name = club.name AND position != 'Member')
    ) AS admins,
    cd.branch,
    (
        SELECT
            COALESCE(JSONB_AGG(JSONB_BUILD_OBJECT('name', f.name, 'phone', f.mobile) ORDER BY f.name), '[]')::JSONB
        FROM
            faculty AS f
        JOIN club_faculty AS cf ON f.emp_id = cf.emp_id
        WHERE
            cf.club_name = club.name
    ) AS faculties,
    (
        SELECT
            COALESCE(JSONB_AGG(JSONB_BUILD_OBJECT('platform', cs.platform_type, 'link', cs.link) ORDER BY cs.platform_type), '[]')::JSONB
        FROM
            club_social AS cs
        WHERE
            cs.club_name = club.name
    ) AS socials
FROM
    club
JOIN
    club_details AS cd
    ON club.name = cd.club_name
WHERE
    club.name = $1
    OR club.alias = $1
`

type GetClubRow struct {
	Name             string          `json:"name"`
	Alias            string          `json:"alias"`
	Category         string          `json:"category"`
	ShortDescription string          `json:"short_description"`
	Email            string          `json:"email"`
	IsOfficial       bool            `json:"is_official"`
	Description      json.RawMessage `json:"description"`
	Admins           json.RawMessage `json:"admins"`
	Branch           []string        `json:"branch"`
	Faculties        json.RawMessage `json:"faculties"`
	Socials          json.RawMessage `json:"socials"`
}

func (q *Queries) GetClub(ctx context.Context, name string) (GetClubRow, error) {
	row := q.db.QueryRowContext(ctx, getClub, name)
	var i GetClubRow
	err := row.Scan(
		&i.Name,
		&i.Alias,
		&i.Category,
		&i.ShortDescription,
		&i.Email,
		&i.IsOfficial,
		&i.Description,
		&i.Admins,
		pq.Array(&i.Branch),
		&i.Faculties,
		&i.Socials,
	)
	return i, err
}

const getClubFaculty = `-- name: GetClubFaculty :many
SELECT
    f.name, f.mobile
FROM
    faculty AS f
    JOIN club_faculty AS cf ON f.emp_id = cf.emp_id
WHERE
    cf.club_name = $1
    OR $1 = (SELECT alias FROM club WHERE name = cf.club_name)
`

type GetClubFacultyRow struct {
	Name   string `json:"name"`
	Mobile string `json:"mobile"`
}

func (q *Queries) GetClubFaculty(ctx context.Context, clubName string) ([]GetClubFacultyRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubFaculty, clubName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubFacultyRow
	for rows.Next() {
		var i GetClubFacultyRow
		if err := rows.Scan(&i.Name, &i.Mobile); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubSocials = `-- name: GetClubSocials :many
SELECT
    platform_type,
    link
FROM
    club_social
WHERE
    club_name = (SELECT c.name FROM club AS c WHERE c.name = $1 or c.alias = $1)
`

type GetClubSocialsRow struct {
	PlatformType string `json:"platform_type"`
	Link         string `json:"link"`
}

func (q *Queries) GetClubSocials(ctx context.Context, name string) ([]GetClubSocialsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubSocials, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubSocialsRow
	for rows.Next() {
		var i GetClubSocialsRow
		if err := rows.Scan(&i.PlatformType, &i.Link); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubs = `-- name: GetClubs :many
SELECT
    name,
    COALESCE(alias, name) AS short_name,
    category,
    short_description,
    email,
    is_official
FROM
    club
ORDER BY
    club.name
`

type GetClubsRow struct {
	Name             string `json:"name"`
	ShortName        string `json:"short_name"`
	Category         string `json:"category"`
	ShortDescription string `json:"short_description"`
	Email            string `json:"email"`
	IsOfficial       bool   `json:"is_official"`
}

func (q *Queries) GetClubs(ctx context.Context) ([]GetClubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubsRow
	for rows.Next() {
		var i GetClubsRow
		if err := rows.Scan(
			&i.Name,
			&i.ShortName,
			&i.Category,
			&i.ShortDescription,
			&i.Email,
			&i.IsOfficial,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClubSocials = `-- name: UpdateClubSocials :exec
UPDATE
    club_social
SET
    link = $2
WHERE
    platform_type = $1
    AND club_name = (SELECT c.name FROM club AS c WHERE c.name = $3 or c.alias = $3)
`

type UpdateClubSocialsParams struct {
	PlatformType string `json:"platform_type"`
	Link         string `json:"link"`
	Name         string `json:"name"`
}

func (q *Queries) UpdateClubSocials(ctx context.Context, arg UpdateClubSocialsParams) error {
	_, err := q.db.ExecContext(ctx, updateClubSocials, arg.PlatformType, arg.Link, arg.Name)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: student.sql

package query

import (
	"context"
	"database/sql"
	"encoding/json"
)

const getDiscordLinkStatus = `-- name: GetDiscordLinkStatus :one
SELECT is_verified FROM student WHERE discord_id = $1
`

func (q *Queries) GetDiscordLinkStatus(ctx context.Context, discordID sql.NullInt64) (bool, error) {
	row := q.db.QueryRowContext(ctx, getDiscordLinkStatus, discordID)
	var is_verified bool
	err := row.Scan(&is_verified)
	return is_verified, err
}

const getHostels = `-- name: GetHostels :many
SELECT hostel.id, hostel.name, hostel.email, JSON_AGG(JSON_BUILD_OBJECT('name', warden.name, 'mobile', warden.mobile)) AS "wardens"
FROM hostel
LEFT JOIN warden ON warden.hostel_id = hostel.id
GROUP BY hostel.id
`

type GetHostelsRow struct {
	ID      string          `json:"id"`
	Name    string          `json:"name"`
	Email   string          `json:"email"`
	Wardens json.RawMessage `json:"wardens"`
}

func (q *Queries) GetHostels(ctx context.Context) ([]GetHostelsRow, error) {
	rows, err := q.db.QueryContext(ctx, getHostels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHostelsRow
	for rows.Next() {
		var i GetHostelsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Wardens,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one
SELECT
    roll_number, section, name, gender, mobile, birth_date, email, batch, hostel_id, room_id, discord_id, is_verified, clubs
FROM
    student
WHERE roll_number = $1
`

func (q *Queries) GetStudent(ctx context.Context, rollNumber string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Section,
		&i.Name,
		&i.Gender,
		&i.Mobile,
		&i.BirthDate,
		&i.Email,
		&i.Batch,
		&i.HostelID,
		&i.RoomID,
		&i.DiscordID,
		&i.IsVerified,
		&i.Clubs,
	)
	return i, err
}

const getStudentByDiscordID = `-- name: GetStudentByDiscordID :one
SELECT
    roll_number, section, name, gender, mobile, birth_date, email, batch, hostel_id, room_id, discord_id, is_verified, clubs
FROM
    student
WHERE discord_id = $1
`

func (q *Queries) GetStudentByDiscordID(ctx context.Context, discordID sql.NullInt64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudentByDiscordID, discordID)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Section,
		&i.Name,
		&i.Gender,
		&i.Mobile,
		&i.BirthDate,
		&i.Email,
		&i.Batch,
		&i.HostelID,
		&i.RoomID,
		&i.DiscordID,
		&i.IsVerified,
		&i.Clubs,
	)
	return i, err
}

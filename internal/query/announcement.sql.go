// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: announcement.sql

package query

import (
	"context"
	"time"
)

const createAcademicAnnouncement = `-- name: CreateAcademicAnnouncement :exec
INSERT INTO academic_announcement (
    date_of_creation, title, title_link, kind
)
VALUES (
    $1,
    $2,
    $3,
    'academic'
) ON CONFLICT (date_of_creation, title)
DO NOTHING
`

type CreateAcademicAnnouncementParams struct {
	DateOfCreation time.Time `json:"date_of_creation"`
	Title          string    `json:"title"`
	TitleLink      string    `json:"title_link"`
}

func (q *Queries) CreateAcademicAnnouncement(ctx context.Context, arg CreateAcademicAnnouncementParams) error {
	_, err := q.db.ExecContext(ctx, createAcademicAnnouncement, arg.DateOfCreation, arg.Title, arg.TitleLink)
	return err
}

const getAcademicAnnouncements = `-- name: GetAcademicAnnouncements :many
SELECT date_of_creation, title, title_link, kind
FROM academic_announcement
ORDER BY date_of_creation DESC
`

type GetAcademicAnnouncementsRow struct {
	DateOfCreation time.Time `json:"date_of_creation"`
	Title          string    `json:"title"`
	TitleLink      string    `json:"title_link"`
	Kind           string    `json:"kind"`
}

func (q *Queries) GetAcademicAnnouncements(ctx context.Context) ([]GetAcademicAnnouncementsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAcademicAnnouncements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAcademicAnnouncementsRow
	for rows.Next() {
		var i GetAcademicAnnouncementsRow
		if err := rows.Scan(
			&i.DateOfCreation,
			&i.Title,
			&i.TitleLink,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package query

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getAllCourses = `-- name: GetAllCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroups = `-- name: GetAllGroups :many
SELECT
    g.name, g.alias, g.branch, g.kind, g.description,
    gd.id AS server_id,
    gd.invite AS server_invite,
    gd.fresher_role,
    gd.sophomore_role,
    gd.junior_role,
    gd.senior_role,
    gd.guest_role,
    CAST(ARRAY(SELECT gf.name FROM group_faculty gf WHERE g.name = gf.group_name) AS text[]) AS faculty_names,
    CAST(ARRAY(SELECT gf.mobile FROM group_faculty gf WHERE g.name = gf.group_name) AS bigint[]) AS faculty_mobiles,
    CAST(ARRAY(SELECT gs.type FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_types,
    CAST(ARRAY(SELECT gs.link FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_links,
    CAST(ARRAY(SELECT ga.position FROM group_admin ga WHERE g.name = ga.group_name) AS text[]) AS admin_positions,
    CAST(ARRAY(SELECT ga.roll_number FROM group_admin ga WHERE g.name = ga.group_name) AS bigint[]) AS admin_rolls,
    CAST(ARRAY(SELECT gm.roll_number from group_member gm where g.name = gm.group_name) AS bigint[]) AS members
FROM
    groups g
    JOIN group_discord gd ON g.name = gd.name
`

type GetAllGroupsRow struct {
	Name           string
	Alias          sql.NullString
	Branch         sql.NullString
	Kind           string
	Description    sql.NullString
	ServerID       sql.NullInt64
	ServerInvite   sql.NullString
	FresherRole    sql.NullInt64
	SophomoreRole  sql.NullInt64
	JuniorRole     sql.NullInt64
	SeniorRole     sql.NullInt64
	GuestRole      sql.NullInt64
	FacultyNames   []string
	FacultyMobiles []int64
	SocialTypes    []string
	SocialLinks    []string
	AdminPositions []string
	AdminRolls     []int64
	Members        []int64
}

func (q *Queries) GetAllGroups(ctx context.Context) ([]GetAllGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGroupsRow
	for rows.Next() {
		var i GetAllGroupsRow
		if err := rows.Scan(
			&i.Name,
			&i.Alias,
			&i.Branch,
			&i.Kind,
			&i.Description,
			&i.ServerID,
			&i.ServerInvite,
			&i.FresherRole,
			&i.SophomoreRole,
			&i.JuniorRole,
			&i.SeniorRole,
			&i.GuestRole,
			pq.Array(&i.FacultyNames),
			pq.Array(&i.FacultyMobiles),
			pq.Array(&i.SocialTypes),
			pq.Array(&i.SocialLinks),
			pq.Array(&i.AdminPositions),
			pq.Array(&i.AdminRolls),
			pq.Array(&i.Members),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchCourses = `-- name: GetBranchCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE branch = $1
`

func (q *Queries) GetBranchCourses(ctx context.Context, branch string) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getBranchCourses, branch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, code string) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, code)
	var i Course
	err := row.Scan(
		&i.Code,
		&i.Title,
		&i.Branch,
		&i.Semester,
		pq.Array(&i.Credits),
		pq.Array(&i.Prereq),
		&i.Type,
		&i.Objectives,
		&i.Content,
		&i.Books,
		&i.Outcomes,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE branch = $1 AND semester = $2
`

type GetCoursesParams struct {
	Branch   string
	Semester int16
}

func (q *Queries) GetCourses(ctx context.Context, arg GetCoursesParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getCourses, arg.Branch, arg.Semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSemesterCourses = `-- name: GetSemesterCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE semester = $1
`

func (q *Queries) GetSemesterCourses(ctx context.Context, semester int16) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getSemesterCourses, semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one
SELECT roll_number, section, sub_section, name, gender, mobile, birthday, email, batch, hostel_number, room_number, discord_uid, verified FROM student
WHERE roll_number = $1
`

func (q *Queries) GetStudent(ctx context.Context, rollNumber int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Section,
		&i.SubSection,
		&i.Name,
		&i.Gender,
		&i.Mobile,
		&i.Birthday,
		&i.Email,
		&i.Batch,
		&i.HostelNumber,
		&i.RoomNumber,
		&i.DiscordUid,
		&i.Verified,
	)
	return i, err
}

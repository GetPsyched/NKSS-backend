// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package query

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getAllCourses = `-- name: GetAllCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
`

func (q *Queries) GetAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroups = `-- name: GetAllGroups :many
SELECT
    g.name, g.alias, g.branch, g.kind, g.description,
    gd.id AS server_id,
    gd.invite AS server_invite,
    gd.fresher_role,
    gd.sophomore_role,
    gd.junior_role,
    gd.senior_role,
    gd.guest_role,
    CAST(ARRAY(SELECT gf.name FROM group_faculty gf WHERE g.name = gf.group_name) AS text[]) AS faculty_names,
    CAST(ARRAY(SELECT gf.mobile FROM group_faculty gf WHERE g.name = gf.group_name) AS bigint[]) AS faculty_mobiles,
    CAST(ARRAY(SELECT gs.type FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_types,
    CAST(ARRAY(SELECT gs.link FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_links,
    CAST(ARRAY(SELECT ga.position FROM group_admin ga WHERE g.name = ga.group_name) AS text[]) AS admin_positions,
    CAST(ARRAY(SELECT ga.roll_number FROM group_admin ga WHERE g.name = ga.group_name) AS bigint[]) AS admin_rolls,
    CAST(ARRAY(SELECT gm.roll_number FROM group_member gm WHERE g.name = gm.group_name) AS bigint[]) AS members
FROM
    groups g
    JOIN group_discord gd ON g.name = gd.name
`

type GetAllGroupsRow struct {
	Name           string
	Alias          sql.NullString
	Branch         sql.NullString
	Kind           string
	Description    sql.NullString
	ServerID       sql.NullInt64
	ServerInvite   sql.NullString
	FresherRole    sql.NullInt64
	SophomoreRole  sql.NullInt64
	JuniorRole     sql.NullInt64
	SeniorRole     sql.NullInt64
	GuestRole      sql.NullInt64
	FacultyNames   []string
	FacultyMobiles []int64
	SocialTypes    []string
	SocialLinks    []string
	AdminPositions []string
	AdminRolls     []int64
	Members        []int64
}

func (q *Queries) GetAllGroups(ctx context.Context) ([]GetAllGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGroupsRow
	for rows.Next() {
		var i GetAllGroupsRow
		if err := rows.Scan(
			&i.Name,
			&i.Alias,
			&i.Branch,
			&i.Kind,
			&i.Description,
			&i.ServerID,
			&i.ServerInvite,
			&i.FresherRole,
			&i.SophomoreRole,
			&i.JuniorRole,
			&i.SeniorRole,
			&i.GuestRole,
			pq.Array(&i.FacultyNames),
			pq.Array(&i.FacultyMobiles),
			pq.Array(&i.SocialTypes),
			pq.Array(&i.SocialLinks),
			pq.Array(&i.AdminPositions),
			pq.Array(&i.AdminRolls),
			pq.Array(&i.Members),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchCourses = `-- name: GetBranchCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE branch = $1
`

func (q *Queries) GetBranchCourses(ctx context.Context, branch string) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getBranchCourses, branch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubAdmins = `-- name: GetClubAdmins :many
SELECT student.roll_number, student.section, student.sub_section, student.name, student.gender, student.mobile, student.birthday, student.email, student.batch, student.hostel_number, student.room_number, student.discord_uid, student.verified, group_admin.group_name FROM group_admin, student WHERE group_admin.roll_number = $1 AND group_admin.roll_number = student.roll_number
`

type GetClubAdminsRow struct {
	RollNumber   int32
	Section      string
	SubSection   string
	Name         string
	Gender       sql.NullString
	Mobile       sql.NullString
	Birthday     sql.NullTime
	Email        string
	Batch        int16
	HostelNumber sql.NullString
	RoomNumber   sql.NullString
	DiscordUid   sql.NullInt64
	Verified     bool
	GroupName    string
}

func (q *Queries) GetClubAdmins(ctx context.Context, rollNumber int32) ([]GetClubAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubAdmins, rollNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubAdminsRow
	for rows.Next() {
		var i GetClubAdminsRow
		if err := rows.Scan(
			&i.RollNumber,
			&i.Section,
			&i.SubSection,
			&i.Name,
			&i.Gender,
			&i.Mobile,
			&i.Birthday,
			&i.Email,
			&i.Batch,
			&i.HostelNumber,
			&i.RoomNumber,
			&i.DiscordUid,
			&i.Verified,
			&i.GroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClubMemberships = `-- name: GetClubMemberships :many
SELECT student.roll_number, student.section, student.sub_section, student.name, student.gender, student.mobile, student.birthday, student.email, student.batch, student.hostel_number, student.room_number, student.discord_uid, student.verified, group_member.group_name FROM group_member, student WHERE group_member.roll_number = $1 AND group_member.roll_number = student.roll_number
`

type GetClubMembershipsRow struct {
	RollNumber   int32
	Section      string
	SubSection   string
	Name         string
	Gender       sql.NullString
	Mobile       sql.NullString
	Birthday     sql.NullTime
	Email        string
	Batch        int16
	HostelNumber sql.NullString
	RoomNumber   sql.NullString
	DiscordUid   sql.NullInt64
	Verified     bool
	GroupName    string
}

func (q *Queries) GetClubMemberships(ctx context.Context, rollNumber int32) ([]GetClubMembershipsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubMemberships, rollNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubMembershipsRow
	for rows.Next() {
		var i GetClubMembershipsRow
		if err := rows.Scan(
			&i.RollNumber,
			&i.Section,
			&i.SubSection,
			&i.Name,
			&i.Gender,
			&i.Mobile,
			&i.Birthday,
			&i.Email,
			&i.Batch,
			&i.HostelNumber,
			&i.RoomNumber,
			&i.DiscordUid,
			&i.Verified,
			&i.GroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCourse = `-- name: GetCourse :one
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, code string) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, code)
	var i Course
	err := row.Scan(
		&i.Code,
		&i.Title,
		&i.Branch,
		&i.Semester,
		pq.Array(&i.Credits),
		pq.Array(&i.Prereq),
		&i.Type,
		&i.Objectives,
		&i.Content,
		&i.Books,
		&i.Outcomes,
	)
	return i, err
}

const getCourses = `-- name: GetCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE branch = $1 AND semester = $2
`

type GetCoursesParams struct {
	Branch   string
	Semester int16
}

func (q *Queries) GetCourses(ctx context.Context, arg GetCoursesParams) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getCourses, arg.Branch, arg.Semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
SELECT
    g.name, g.alias, g.branch, g.kind, g.description,
    gd.id AS server_id,
    gd.invite AS server_invite,
    gd.fresher_role,
    gd.sophomore_role,
    gd.junior_role,
    gd.senior_role,
    gd.guest_role,
    CAST(ARRAY(SELECT gf.name FROM group_faculty gf WHERE g.name = gf.group_name) AS text[]) AS faculty_names,
    CAST(ARRAY(SELECT gf.mobile FROM group_faculty gf WHERE g.name = gf.group_name) AS bigint[]) AS faculty_mobiles,
    CAST(ARRAY(SELECT gs.type FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_types,
    CAST(ARRAY(SELECT gs.link FROM group_social gs WHERE g.name = gs.name) AS text[]) AS social_links,
    CAST(ARRAY(SELECT ga.position FROM group_admin ga WHERE g.name = ga.group_name) AS text[]) AS admin_positions,
    CAST(ARRAY(SELECT ga.roll_number FROM group_admin ga WHERE g.name = ga.group_name) AS bigint[]) AS admin_rolls,
    CAST(ARRAY(SELECT gm.roll_number FROM group_member gm WHERE g.name = gm.group_name) AS bigint[]) AS members
FROM
    groups g
    JOIN group_discord gd ON g.name = gd.name
WHERE
    g.name = $1
    OR g.alias = $1
`

type GetGroupRow struct {
	Name           string
	Alias          sql.NullString
	Branch         sql.NullString
	Kind           string
	Description    sql.NullString
	ServerID       sql.NullInt64
	ServerInvite   sql.NullString
	FresherRole    sql.NullInt64
	SophomoreRole  sql.NullInt64
	JuniorRole     sql.NullInt64
	SeniorRole     sql.NullInt64
	GuestRole      sql.NullInt64
	FacultyNames   []string
	FacultyMobiles []int64
	SocialTypes    []string
	SocialLinks    []string
	AdminPositions []string
	AdminRolls     []int64
	Members        []int64
}

func (q *Queries) GetGroup(ctx context.Context, name string) (GetGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getGroup, name)
	var i GetGroupRow
	err := row.Scan(
		&i.Name,
		&i.Alias,
		&i.Branch,
		&i.Kind,
		&i.Description,
		&i.ServerID,
		&i.ServerInvite,
		&i.FresherRole,
		&i.SophomoreRole,
		&i.JuniorRole,
		&i.SeniorRole,
		&i.GuestRole,
		pq.Array(&i.FacultyNames),
		pq.Array(&i.FacultyMobiles),
		pq.Array(&i.SocialTypes),
		pq.Array(&i.SocialLinks),
		pq.Array(&i.AdminPositions),
		pq.Array(&i.AdminRolls),
		pq.Array(&i.Members),
	)
	return i, err
}

const getGroupAdmins = `-- name: GetGroupAdmins :many
SELECT
    s.roll_number, s.section, s.sub_section, s.name, s.gender, s.mobile, s.birthday, s.email, s.batch, s.hostel_number, s.room_number, s.discord_uid, s.verified, admin.position
FROM
    student s
    JOIN group_admin admin ON s.roll_number = admin.roll_number
WHERE
    admin.group_name = $1
    OR $1 = (SELECT alias FROM groups WHERE name = admin.group_name)
`

type GetGroupAdminsRow struct {
	RollNumber   int32
	Section      string
	SubSection   string
	Name         string
	Gender       sql.NullString
	Mobile       sql.NullString
	Birthday     sql.NullTime
	Email        string
	Batch        int16
	HostelNumber sql.NullString
	RoomNumber   sql.NullString
	DiscordUid   sql.NullInt64
	Verified     bool
	Position     sql.NullString
}

func (q *Queries) GetGroupAdmins(ctx context.Context, groupName string) ([]GetGroupAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupAdmins, groupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupAdminsRow
	for rows.Next() {
		var i GetGroupAdminsRow
		if err := rows.Scan(
			&i.RollNumber,
			&i.Section,
			&i.SubSection,
			&i.Name,
			&i.Gender,
			&i.Mobile,
			&i.Birthday,
			&i.Email,
			&i.Batch,
			&i.HostelNumber,
			&i.RoomNumber,
			&i.DiscordUid,
			&i.Verified,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupFaculty = `-- name: GetGroupFaculty :many
SELECT
    name, mobile
FROM
    group_faculty gf
WHERE
    gf.group_name = $1
    OR $1 = (SELECT alias FROM groups WHERE name = gf.group_name)
`

type GetGroupFacultyRow struct {
	Name   string
	Mobile int64
}

func (q *Queries) GetGroupFaculty(ctx context.Context, groupName string) ([]GetGroupFacultyRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupFaculty, groupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupFacultyRow
	for rows.Next() {
		var i GetGroupFacultyRow
		if err := rows.Scan(&i.Name, &i.Mobile); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupMembers = `-- name: GetGroupMembers :many
SELECT
    s.roll_number, s.section, s.sub_section, s.name, s.gender, s.mobile, s.birthday, s.email, s.batch, s.hostel_number, s.room_number, s.discord_uid, s.verified
FROM
    student s
    JOIN group_member member ON s.roll_number = member.roll_number
WHERE
    member.group_name = $1
    OR $1 = (SELECT alias FROM groups WHERE name = member.group_name)
`

func (q *Queries) GetGroupMembers(ctx context.Context, groupName string) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getGroupMembers, groupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.RollNumber,
			&i.Section,
			&i.SubSection,
			&i.Name,
			&i.Gender,
			&i.Mobile,
			&i.Birthday,
			&i.Email,
			&i.Batch,
			&i.HostelNumber,
			&i.RoomNumber,
			&i.DiscordUid,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupSocials = `-- name: GetGroupSocials :many
SELECT
    type,
    link
FROM
    group_social gs
WHERE
    gs.name = $1
    OR $1 = (SELECT alias FROM groups WHERE name = gs.name)
`

type GetGroupSocialsRow struct {
	Type string
	Link string
}

func (q *Queries) GetGroupSocials(ctx context.Context, name string) ([]GetGroupSocialsRow, error) {
	rows, err := q.db.QueryContext(ctx, getGroupSocials, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupSocialsRow
	for rows.Next() {
		var i GetGroupSocialsRow
		if err := rows.Scan(&i.Type, &i.Link); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSemesterCourses = `-- name: GetSemesterCourses :many
SELECT code, title, branch, semester, credits, prereq, type, objectives, content, books, outcomes FROM course
WHERE semester = $1
`

func (q *Queries) GetSemesterCourses(ctx context.Context, semester int16) ([]Course, error) {
	rows, err := q.db.QueryContext(ctx, getSemesterCourses, semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.Code,
			&i.Title,
			&i.Branch,
			&i.Semester,
			pq.Array(&i.Credits),
			pq.Array(&i.Prereq),
			&i.Type,
			&i.Objectives,
			&i.Content,
			&i.Books,
			&i.Outcomes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one
SELECT roll_number, section, sub_section, name, gender, mobile, birthday, email, batch, hostel_number, room_number, discord_uid, verified FROM student
WHERE roll_number = $1
`

func (q *Queries) GetStudent(ctx context.Context, rollNumber int32) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Section,
		&i.SubSection,
		&i.Name,
		&i.Gender,
		&i.Mobile,
		&i.Birthday,
		&i.Email,
		&i.Batch,
		&i.HostelNumber,
		&i.RoomNumber,
		&i.DiscordUid,
		&i.Verified,
	)
	return i, err
}

const updateGroupFaculty = `-- name: UpdateGroupFaculty :exec
UPDATE
    group_faculty gf
SET
    mobile = $2
WHERE
    gf.name = $1
    AND gf.group_name = $3
    OR $3 = (SELECT alias FROM groups WHERE name = gf.group_name)
`

type UpdateGroupFacultyParams struct {
	Name      string
	Mobile    int64
	GroupName string
}

func (q *Queries) UpdateGroupFaculty(ctx context.Context, arg UpdateGroupFacultyParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupFaculty, arg.Name, arg.Mobile, arg.GroupName)
	return err
}

const updateGroupSocials = `-- name: UpdateGroupSocials :exec
UPDATE
    group_social gs
SET
    link = $2
WHERE
    gs.type = $1
    AND gs.name = $3
    OR $3 = (SELECT alias FROM groups WHERE name = gs.name)
`

type UpdateGroupSocialsParams struct {
	Type string
	Link string
	Name string
}

func (q *Queries) UpdateGroupSocials(ctx context.Context, arg UpdateGroupSocialsParams) error {
	_, err := q.db.ExecContext(ctx, updateGroupSocials, arg.Type, arg.Link, arg.Name)
	return err
}
